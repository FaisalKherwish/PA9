//Object Manager File
#ifndef P1
#define P1
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <SFML/Graphics.hpp>
#include <ctime>
#include <cstdlib>



class ObjectManager
{
public: 
	ObjectManager();
	~ObjectManager();
	
	void setSprite(sf::Texture& texture);
	void setPoints(const int newPoints);
	void setName(std::string newName);
	std::string getName();

	void changeColor(sf::Color newColor);
	
	
	void draw(sf::RenderWindow& window);

	sf::CircleShape& getShape();

	const int getPoints();

	void gravity(sf::RenderWindow& window, int rounds);


private:

	

	int mPoints;
	sf::CircleShape shape;
	std::string name;
	sf::Vector2f pos;


};

#endif

//ObjectManager.cpp

#include "ObjectManager.hpp"

ObjectManager::ObjectManager()
{
	std::srand(std::time(nullptr));

	double 	x = rand() % 1000;

	sf::CircleShape s1(100.f);
	this->name = "";
	this->shape = s1;

	shape.setFillColor(sf::Color::Cyan);
	shape.setRadius(50);
	shape.setPosition(sf::Vector2f(x,1200));

	this->pos.x = shape.getPosition().x;
	this->pos.y = shape.getPosition().y;

	this->mPoints = 0;
}

ObjectManager::~ObjectManager()
{
	this->shape.setFillColor(sf::Color::Transparent);
}



sf::CircleShape& ObjectManager::getShape()
{
	return this->shape;
}

const int ObjectManager::getPoints()
{
	return this->mPoints;
}



void ObjectManager::gravity(sf::RenderWindow& window, int rounds)
{
	std::srand(std::time(nullptr));

	double 	y = rand() % 250;

	while (this->shape.getPosition().y != y)
	{
		this->shape.move(sf::Vector2f(0, -1 * 0.5));
		draw(window);


	}
	while (this->shape.getPosition().y < 1200)
	{
		this->shape.move(sf::Vector2f(0, 1 * 0.5));
		draw(window);
	
	}
	this->shape.setFillColor(sf::Color::Transparent);
	
}





void ObjectManager::setSprite(sf::Texture& texture)
{
	this->shape.setTexture(&texture);
}

void ObjectManager::setPoints(const int newPoints)
{
	this->mPoints += newPoints;
}

void ObjectManager::setName(std::string newName)
{
	this->name = newName;
}

std::string ObjectManager::getName()
{
	return this->name;
}

void ObjectManager::changeColor(sf::Color newColor)
{
	this->shape.setFillColor(newColor);

}



void ObjectManager::draw(sf::RenderWindow& window)
{
	window.clear();
	window.draw(this->shape);
	window.display();
}
//Watermelon.hpp
#include "ObjectManager.hpp"


class Watermelon : public ObjectManager
{
public:
	Watermelon();
	Watermelon(sf::Texture newSprite);

private:
	ObjectManager object;
};

class Kiwi : public ObjectManager
{
public:
	Kiwi();
	Kiwi(sf::Texture newSprite);
};

class Orange : public ObjectManager
{
public:
	Orange();
	Orange(sf::Texture newSprite);
};

class Apple : public ObjectManager
{
public:
	Apple();
	Apple(sf::Texture newSprite);
};


class Coconut : public ObjectManager
{
public:
	Coconut();
	Coconut(sf::Texture newSprite);
};

class Dragonfruit : public ObjectManager
{
public:
	Dragonfruit();
	Dragonfruit(sf::Texture newSprite);
};







//Watermelon.cpp
#include "Watermelon.hpp"

Watermelon::Watermelon()
{
	std::srand(std::time(nullptr));

	double 	z = rand() % 1000;

	this->object.getShape().setFillColor(sf::Color::Red);
	this->object.setPoints(1);
	this->object.getShape().setPosition(sf::Vector2f(z, 1200));
	this->object.setName("Watermelon");
	

	
}

Watermelon::Watermelon(sf::Texture newSprite)
{
	std::srand(std::time(nullptr));

	double 	z = rand() % 1000;

	this->object.getShape().setFillColor(sf::Color::Red);
	this->object.setPoints(1);
	this->object.getShape().setPosition(sf::Vector2f(z, 1200));
	this->object.setName("Watermelon");
	this->object.setSprite(newSprite);

}
